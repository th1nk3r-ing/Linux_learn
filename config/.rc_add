# ubuntu's bash & zsh persional configeriation
# @think3r 2020-07-01 00:06:07

# print color alias
if command -v tput > /dev/null; then
    export prt_Bold=$(tput bold)
    export prt_Black=$(tput setaf 0)
    export prt_Red=$(tput setaf 1)
    export prt_Green=$(tput setaf 2)
    export prt_Yellow=$(tput setaf 3)
    export prt_Blue=$(tput setaf 4)
    export prt_Purple=$(tput setaf 5)
    export prt_Cyan=$(tput setaf 6)
    export prt_White=$(tput setaf 7)
    export prt_End=$(tput sgr0)
else
    if (uname -a | grep "Linux" > /dev/null) ; then # gnu-linux
        prt_Start="\e"
    elif (uname -a | grep "Darwin" > /dev/null) ;then #  MACOS 下的颜色输出不太一样;
        prt_Start="\033"
    fi

    export prt_Black=$prt_Start"[1;30m"
    export prt_Red=$prt_Start"[1;31m"
    export prt_Green=$prt_Start"[1;32m"
    export prt_Yellow=$prt_Start"[1;33m"
    export prt_Blue=$prt_Start"[1;34m"
    export prt_Purple=$prt_Start"[1;35m"
    export prt_Cyan=$prt_Start"[1;36m"
    export prt_White=$prt_Start"[1;37m"
    export prt_RedLine=$prt_Start"[4;31m"
    export prt_GreenLine=$prt_Start"[4;32m"
    export prt_YellowLine=$prt_Start"[4;33m"
    export prt_End=$prt_Start"[0m"
fi

if ls --version 2>&1 | grep -iq "busybox"; then
    alias ll="ls -alhF --full-time"
else
    alias ll="ls -alhF --time-style='+%Y/%m/%d_%H:%M:%S'"
fi
alias la='ls -A'
alias l='ls -CF'
alias clc='clear'

function get_distro() {
    local distro
    if [ -f /etc/os-release ]; then
        distro=$(grep '^ID=' /etc/os-release | awk -F= '{print tolower($2)}' | tr -d '"')
    elif [ -f /etc/alpine-release ]; then
        distro="alpine"
    elif [ -f /etc/centos-release ]; then
        distro="centos"
    elif [ -f /etc/debian_version ]; then
        distro="debian"
    elif [ -f /etc/fedora-release ]; then
        distro="fedora"
    elif [ -f /etc/arch-release ]; then
        distro="arch"
    else
        distro="unknown"
    fi
    echo "$distro"
}

myOsInfo="*nix"
# if is WSL / MACOS, add some platform-unique-alias
if (uname -a | grep "icrosoft" >/dev/null); then      # WSL
    if (uname -a | grep "WSL2" > /dev/null); then
        myOsInfo="WSL-2"
    else
        myOsInfo="WSL-1"
    fi

    alias e.='explorer.exe .'

    # 挂载网络磁盘
    # sudo mount -t drvfs D: /mnt/d
    # 自动挂载网络磁盘
    #if [[ ! -f "/mnt/u/.bashrc" ]]; then
    #	echo passwd | sudo -S mount -t drvfs U: /mnt/u
    #	echo -e $prt_Green "mount netdisk U success!" $prt_End
    #fi

    #取消windows路径中的文件夹背景色
    if [[ -f "$HOME/.dir_colors" ]] && command -v dircolors >/dev/null 2>&1; then
        eval "$(dircolors -b "$HOME/.dir_colors")"
    fi

	# [oh-my-zsh Tab completion not using dir_colors #1563](https://github.com/ohmyzsh/ohmyzsh/issues/1563)
    if (echo "$SHELL" | grep "zsh" >/dev/null) && [[ -d "$HOME/.oh-my-zsh" ]]; then
        # echo -e "$prt_Red fix zsh table color $prt_End"
        zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
		VAR_OHMYZSH=1
    fi
elif (uname -a | grep "Darwin" >/dev/null) ;then       # MACOS
    myOsInfo="MacOS"
    alias e.='open .'
    if command -v gls > /dev/null; then
        alias gll="gls -alhF --time-style='+%Y/%m/%d_%H:%M:%S' --color=auto"   # MACOS gnu-ls;
    fi
    alias ll="ls -alhFGT"  # MACOS ll 特殊化;
    #echo "this is $prt_YellowLine macos $prt_End, reg open ."
    export LC_ALL=en_US.UTF-8
    export LANG=en_US.UTF-8
fi

# some more ls aliases
if command -v exa > /dev/null; then
	alias el="exa -aHlFg --time-style=long-iso"
fi

# https://github.com/macmade/trash
if command -v trash > /dev/null; then
    alias rm=trash
fi

# add android-termux command;
if [[ -f ~/termux_sh.sh ]]; then
    . ~/termux_sh.sh
fi

#autojump
if [[ -d "$HOME/.autojump" ]]; then
    [[ -s "$HOME/.autojump/etc/profile.d/autojump.sh" ]] && source "$HOME/.autojump/etc/profile.d/autojump.sh"
fi

# 对 ts 视频文件进行二进制 dump
function hex_dump_ts() {
    if [ $# -eq 0 ]; then
        echo -e "$prt_Red error! $prt_White need 1 param : $prt_Yellow ts-filePath ! $prt_End"
        return 1
    fi
    if [ ! -f "$1" ]; then
        echo -e "$prt_Red error! $prt_White file : $prt_Yellow $1 $prt_White not exits! $prt_End"
        return 1
    fi
    xxd -g 1 -c 47 "$1" | less -N -m
}

# 函数: 使用命令得到 git 项目的分支名字;
function parse_git_branch_and_add_brackets {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\ \[\1\]/'
}

function addLetVpnDns {
    # 在 wsl dns 配置文件中, 首个匹配的 nameserver 前插入 dns 配置
    # 172.30.128.1 为 letsVpn 本地私有 dns 地址
	sudo sed -i '0,/^nameserver/{/^nameserver/i\
nameserver 172.30.128.1\
nameserver 223.5.5.5
	}' /etc/resolv.conf
}

function curProxyDisp {
    echo -e "${prt_Bold}${prt_Green}Current${prt_White} proxy settings:${prt_End}"
    # 如果 all_proxy 变量已经被定义，并且它的值不为空字符串，那么 ${all_proxy:-<not set>} 会直接返回 all_proxy 变量的实际值。
    echo -e "  ${prt_Yellow}http_proxy${prt_End}: ${http_proxy:-<not set>}"
    echo -e "  ${prt_Yellow}https_proxy${prt_End}: ${https_proxy:-<not set>}"
    echo -e "  ${prt_Yellow}all_proxy${prt_End}: ${all_proxy:-<not set>}"
}

function clashProxy {
    case "$1" in
        "add")
            clashProxyPort=7897
            export all_proxy=socks5://127.0.0.1:${clashProxyPort}
            export http_proxy=http://127.0.0.1:${clashProxyPort}
            export https_proxy=http://127.0.0.1:${clashProxyPort}
            echo -e "${prt_Bold}${prt_Green}Clash${prt_White} proxy settings ${prt_Yellow}added${prt_End} -> ${clashProxyPort}."
            curProxyDisp
            ;;
        "remove")
            unset all_proxy
            unset http_proxy
            unset https_proxy
            echo -e "${prt_Bold}${prt_Green}Clash${prt_White} proxy settings ${prt_Yellow}removed${prt_End} -> ${clashProxyPort}."
            curProxyDisp
            ;;
        "disp")
            curProxyDisp
            ;;
        *)
            echo -e "${prt_Bold}${prt_Red}Invalid argument. Please use ${prt_Yellow}'add'${prt_White} or ${prt_Yellow}'remove'${prt_End}."
            return 1
            ;;
    esac
}

# 更新 readme
function readmeUpdate() {
    # 定义优先链接和备份链接
    local primary_url="https://gitee.com/think3r/Linux_learn/raw/master/code/updateRepoMdFileList.sh"
    local backup_url="https://raw.githubusercontent.com/th1nk3r-ing/Linux_learn/refs/heads/main/code/updateRepoMdFileList.sh"

    # 尝试从优先链接下载
    if curl --connect-timeout 15 -m 30 -fsSL -o updateRepoMdFileList.sh "$primary_url"; then
        echo -e "成功从 gitee 下载文件。"
    else
        # 如果优先链接下载失败，则尝试从备份链接下载
        if curl --connect-timeout 15 -m 30 -fsSL -o updateRepoMdFileList.sh "$backup_url"; then
            echo -e "成功从 github 下载文件。"
        else
            echo-e "${prt_Red}无法从链接下载文件。请检查链接是否有效。${prt_End}"
            return 1
        fi
    fi

    /bin/bash updateRepoMdFileList.sh
    rm -rf updateRepoMdFileList.sh
}

# PS1 相关
if (echo "$SHELL" | grep "bash" >/dev/null); then
    echo -e "current shell is $prt_Yellow bash $prt_End"
    #设置ssh连接时的shell配色方案为 ubuntu 自带(加入了显示 git 分支的功能;)
    #PS1="\h:\W \u\[\033[0;32m\]\$(parse_git_branch_and_add_brackets) \[\033[0m\]\$ "
    #PS1="${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\$(parse_git_branch_and_add_brackets) \[\033[0m\]\$ "
    PS1="${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[0;32m\]\$(parse_git_branch_and_add_brackets)\[\033[0m\]\$ "
elif (echo "$SHELL" | grep "zsh" >/dev/null); then
	# 关闭 zsh shell 提示音
	unsetopt beep
    # oh-my-zsh 默认主题的情况下, 修改 PS1
    if [[ -d "$HOME/.oh-my-zsh" ]] && [[ "$ZSH_THEME" == "robbyrussell" ]]; then
        PROMPT='%{$fg_bold[red]%}-> %{$fg_bold[green]%}%p%{$fg[cyan]%}%~ %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%}% %{$fg[magenta]%}%(?..%?%2v)%{$reset_color%}#: '
    fi

    # 定义 clashProxy 函数的补全函数
    _complete_clashProxy() {
        local -a subcommands
        subcommands=("add" "remove" "disp")
        _describe 'subcommands' subcommands
    }
    # 将补全函数与 clashProxy 函数关联
    compdef _complete_clashProxy clashProxy
fi

echo -e "$prt_Bold$prt_Yellow$(date '+%Y-%m-%d')    $prt_Green$(date '+%H:%M:%S')    $prt_Cyan $(date '+Week:%W-Day:%w') $prt_End"
echo -e "Current shell is  $prt_Bold$prt_Yellow $SHELL $prt_End  on  $prt_Bold$prt_Green${myOsInfo}$prt_End of $prt_Purple$(get_distro)"

# colourful man page
if [ "$VAR_OHMYZSH" = 0  ]; then
	# oh-my-zsh 使用 colored-man-pages 插件
	#echo "enable self colourful man page"
	export LESS_TERMCAP_mb=$(printf "\e[1;31m")
	export LESS_TERMCAP_md=$(printf "\e[1;31m")
	export LESS_TERMCAP_me=$(printf "\e[0m")
	export LESS_TERMCAP_se=$(printf "\e[0m")
	export LESS_TERMCAP_so=$(printf "\e[1;44;33m")
	export LESS_TERMCAP_ue=$(printf "\e[0m")
	export LESS_TERMCAP_us=$(printf "\e[1;32m")
fi


# 自己的可执行文件本地路径
if [[ -d "$HOME/bin" ]]; then
    # add adb path; 如果不加入, 则需要使用 adb.exe 代替 adb
    my_adb_path="$HOME/bin/platform-tools"
    if [[ -d "$my_adb_path" ]]; then
        PATH="$PATH:$my_adb_path"
    fi
    # go
	my_go_path="$HOME/bin/go/bin"
	if [[ -d "$my_go_path" ]]; then
	    PATH="$PATH:$my_go_path"
	fi
fi

# git repo 使用清华源
if command -v repo > /dev/null; then
    export REPO_URL='https://mirrors.tuna.tsinghua.edu.cn/git/git-repo'
fi

#set java env
if [[ -d "$HOME/bin/jdk-14.0.2" ]];then
    export JAVA_HOME="$HOME/bin/jdk-14.0.2/"
    export JRE_HOME=${JAVA_HOME}
    export CLASSPATH=.:${JAVA_HOME}/lib
    export PATH=${JAVA_HOME}/bin:$PATH
elif [[ -d "$HOME/bin/jdk-15.jdk" ]];then
	export JAVA_HOME="$HOME/bin/jdk-15.jdk/Contents/Home/"
	export JRE_HOME=${JAVA_HOME}
	export CLASSPATH=.:${JAVA_HOME}/lib
	export PATH=${JAVA_HOME}/bin:$PATH
elif [[ -d "$HOME/bin/jdk-16.0.1.jdk" ]];then
    export JAVA_HOME="$HOME/bin/jdk-16.0.1.jdk/Contents/Home/"
    export JRE_HOME=${JAVA_HOME}
	export CLASSPATH=.:${JAVA_HOME}/lib
	export PATH=${JAVA_HOME}/bin:$PATH
fi

if (uname -a | grep "Darwin" > /dev/null) ;then
	if [[ -d "/usr/local/opt/binutils/bin" ]]; then
		export PATH="$PATH:/usr/local/opt/binutils/bin"
	fi
    # if [[ -d "/usr/local/opt/openjdk/bin/" ]]; then
        # PATH="/usr/local/opt/openjdk/bin/:$PATH"
    # fi
fi

if [[ -f "$HOME/.myPath_add" ]]; then
	source ~/.myPath_add
fi

#export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/bin/
